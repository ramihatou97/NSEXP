version: '3.9'

services:
  # PostgreSQL Database with replication support
  postgres-primary:
    image: postgres:15-alpine
    container_name: nssp_db_primary
    hostname: postgres-primary
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-neurosurg}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-neurosurg123}
      POSTGRES_DB: ${POSTGRES_DB:-neurosurgical_knowledge}
      POSTGRES_INITDB_ARGS: "-E UTF8"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-neurosurg} -d ${POSTGRES_DB:-neurosurgical_knowledge}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - nssp_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    container_name: nssp_cache
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - nssp_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: "3.11"
    image: nssp/backend:${VERSION:-latest}
    container_name: nssp_backend
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-neurosurg}:${POSTGRES_PASSWORD:-neurosurg123}@postgres-primary:5432/${POSTGRES_DB:-neurosurgical_knowledge}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # AI API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # Application Settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      
      # CORS Origins
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost,https://yourdomain.com}
      
      # Performance
      WORKERS: ${BACKEND_WORKERS:-4}
      MAX_CONNECTIONS_PER_WORKER: ${MAX_CONNECTIONS:-100}
      
      # Features
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_CACHE: ${ENABLE_CACHE:-true}
      ENABLE_MOCK_MODE: ${ENABLE_MOCK_MODE:-false}
    volumes:
      - ./storage:/app/storage
      - ./textbooks:/app/textbooks
      - ./logs/backend:/app/logs
      - ./temp:/app/temp
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - nssp_network
    deploy:
      mode: replicated
      replicas: ${BACKEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    command: >
      gunicorn main_simplified:app
      --worker-class uvicorn.workers.UvicornWorker
      --workers ${BACKEND_WORKERS:-4}
      --bind 0.0.0.0:8000
      --access-logfile -
      --error-logfile -
      --log-level ${LOG_LEVEL:-info}
      --timeout 120
      --keepalive 5
      --max-requests 10000
      --max-requests-jitter 1000

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: nssp/frontend:${VERSION:-latest}
    container_name: nssp_frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000/api/v1}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000/ws}
      NODE_ENV: production
    volumes:
      - ./logs/frontend:/app/logs
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - nssp_network
    deploy:
      mode: replicated
      replicas: ${FRONTEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nssp_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ./frontend/out:/usr/share/nginx/html:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - nssp_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: nssp_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - nssp_network
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: nssp_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - nssp_network
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: nssp_backup
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-neurosurg}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-neurosurg123}
      POSTGRES_DB: ${POSTGRES_DB:-neurosurgical_knowledge}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "chmod +x /backup.sh && 
             echo '0 2 * * * /backup.sh' | crontab - && 
             crond -f"
    depends_on:
      postgres-primary:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - nssp_network
    profiles:
      - backup

networks:
  nssp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local