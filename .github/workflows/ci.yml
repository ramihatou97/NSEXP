name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements_simplified.txt
      
      - name: Lint with flake8
        run: |
          cd backend
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
        continue-on-error: true
      
      - name: Check code formatting with black
        run: |
          cd backend
          pip install black
          black --check --line-length 100 .
        continue-on-error: true
      
      - name: Run tests with pytest
        run: |
          cd backend
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Lint code
        run: |
          cd frontend
          npm run lint
        continue-on-error: true
      
      - name: Type check
        run: |
          cd frontend
          npm run type-check
        continue-on-error: true
      
      - name: Run tests
        run: |
          cd frontend
          npm run test:ci
        continue-on-error: true
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
          NEXT_PUBLIC_WS_URL: ws://localhost:8000/ws
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: nsexp-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: nsexp-frontend:test
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
            NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: neurosurg
          POSTGRES_PASSWORD: neurosurg123
          POSTGRES_DB: neurosurgical_knowledge
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements_simplified.txt
      
      - name: Run integration tests
        run: |
          cd backend
          pytest tests/integration/ -v -m integration
        env:
          DATABASE_URL: postgresql://neurosurg:neurosurg123@localhost:5432/neurosurgical_knowledge
          REDIS_URL: redis://localhost:6379/0
        continue-on-error: true
      
      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:3000 || exit 1
          docker-compose down
        continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Python security check
        run: |
          pip install safety
          cd backend
          safety check --json || true
        continue-on-error: true
      
      - name: NPM audit
        run: |
          cd frontend
          npm audit --audit-level=moderate || true
        continue-on-error: true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
