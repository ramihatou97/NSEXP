version: '3.9'

# Full Docker Compose with ML Dependencies
# This composition uses the full requirements.txt with PyTorch, transformers, and medical NLP
# For lightweight deployment, use docker-compose-simple.yml instead

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: neurosurg_postgres_full
    environment:
      POSTGRES_USER: neurosurg
      POSTGRES_PASSWORD: ${DB_PASSWORD:-neurosurg123}
      POSTGRES_DB: neurosurgical_knowledge
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neurosurg -d neurosurgical_knowledge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neurosurg_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: neurosurg_redis_full
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neurosurg_network

  # Elasticsearch for Search (Optional - for full ML features)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: neurosurg_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - neurosurg_network

  # Qdrant Vector DB (Optional - alternative to Pinecone)
  qdrant:
    image: qdrant/qdrant
    container_name: neurosurg_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
    networks:
      - neurosurg_network

  # FastAPI Backend with FULL ML Stack
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.full
    container_name: neurosurg_backend_full
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql+asyncpg://neurosurg:${DB_PASSWORD:-neurosurg123}@postgres:5432/neurosurgical_knowledge
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - VECTOR_DB_URL=http://qdrant:6333
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-min-32-chars-long}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - PUBMED_API_KEY=${PUBMED_API_KEY}
    volumes:
      - ./backend:/app
      - ./storage:/storage
      - ./textbooks:/textbooks
      - ./uploads:/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - neurosurg_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    # Note: Full ML build requires more resources
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    container_name: neurosurg_frontend_full
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - neurosurg_network
    command: npm run dev

networks:
  neurosurg_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  qdrant_data:
